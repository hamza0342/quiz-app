[{"D:\\React\\quiz-app\\src\\index.tsx":"1","D:\\React\\quiz-app\\src\\reportWebVitals.ts":"2","D:\\React\\quiz-app\\src\\App.tsx":"3","D:\\React\\quiz-app\\src\\services\\quiz_service.ts":"4","D:\\React\\quiz-app\\src\\Components\\QuestionCard.tsx":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":2538,"mtime":1608900297024,"results":"9","hashOfConfig":"7"},{"size":844,"mtime":1608823035143,"results":"10","hashOfConfig":"7"},{"size":3545,"mtime":1608899780842,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1ytjmcu",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"D:\\React\\quiz-app\\src\\index.tsx",[],["26","27"],"D:\\React\\quiz-app\\src\\reportWebVitals.ts",[],"D:\\React\\quiz-app\\src\\App.tsx",["28","29","30","31","32","33","34"],"import React, { useEffect, useState } from 'react'\nimport { fetchData } from './services/quiz_service';\nimport {Quiz, QuestionType} from './services/quiz_types';\nimport QuestionCard from './Components/QuestionCard'\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  root: {\n    \n    textAlign: 'center',\n    alignItems: 'center',\n    alignContent: 'center',\n    color: '#ffd5ff'\n    \n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 18,\n    color: 'black',\n    textAlign: 'center'\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\n\nfunction App() {\n  const classes = useStyles();\n    const bull = <span className={classes.bullet}>•</span>;\n  \n    let [ans, setAns] = useState('');\n\n    const storeAns = (event: any) => {\n        setAns(event.target.value)\n    }\n  //const [data, setData] = useState([{}]);\n  let [quiz, setQuiz] = useState<QuestionType[]>([]);\n  let [currentStep, setCurrentStep] = useState(0);\n  let [score, setScore] = useState(0);\n  let [displayResult, setDisplayResult] = useState(false);\n  useEffect(() => {\n    async function getData() {\n      const questions: QuestionType[] = await fetchData(5, \"easy\");\n      console.log(questions);\n      setQuiz(questions);\n      //setData(questions);\n    }\n\n    getData();\n\n\n  }, []);\nconst handleSubmit = (e: React.FormEvent<EventTarget>, answer: string) => {\n  e.preventDefault();\n  \n\n  const holdQuestion = quiz[currentStep];\n\n  if (answer === holdQuestion.answer){\n    setScore(++score);\n  }\n  if(currentStep !== quiz.length-1)\n    {setCurrentStep(++currentStep)\n     \n    }\n    \n  else \n  {\n    setDisplayResult(true);  \n  setCurrentStep(0);\n}}\n\n\n\nif (displayResult){\n  return (\n    <div className = \"result\">\n        <h1 className=\"sco\">Quiz Completed</h1>\n        <h3 className=\"sco\"> Number of questions were {quiz.length}</h3>\n        <h3 className = \"sco\"> You scored {score} out of {quiz.length} </h3>\n      </div>\n  )\n}\n  if(!quiz.length)\nreturn <h3>Loading...</h3>\n  return (\n    <div>\n     <h1 className=\"sco\">Your current score is {score}</h1>\n      \n      <QuestionCard \n      options = {quiz[currentStep].option}\n      question = {quiz[currentStep].question}\n      callback = {handleSubmit}\n      //ftn = {handleChange}\n      />\n     \n    </div>\n  )\n}\n\nexport default App\n","D:\\React\\quiz-app\\src\\services\\quiz_service.ts",["35"],"import { Quiz } from \"./quiz_types\";\r\n\r\nconst shuffleArray = (array: any[]) => \r\n    [...array].sort(()=> Math.random() - 0.5);\r\n\r\n\r\nexport const fetchData = async(amount: number, difficulty: string): Promise <Quiz[]> => {\r\n    const response = await fetch(`https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`);\r\n    //let data: QuestionType[] = \r\n    let {results} = await response.json();\r\n    //const results = data.results \r\n    const quiz: Quiz[] = results.map((questionObj: Quiz) => {\r\n        return {\r\n            question: questionObj.question,\r\n            answer: questionObj.correct_answer,\r\n            option: shuffleArray(questionObj.incorrect_answers.concat(questionObj.correct_answer))\r\n          \r\n        }\r\n        \r\n    })\r\n    return quiz;\r\n\r\n}\r\n\r\n{/*}\r\n\r\n*/}","D:\\React\\quiz-app\\src\\Components\\QuestionCard.tsx",["36","37","38","39"],"import React, {useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport '../App.css'\r\n\r\ntype propsType = {\r\n    question: string;\r\n    options: string[];\r\n    callback: (e:React.FormEvent<EventTarget> , ans : string) => void\r\n    //ftn : (e: any) => void\r\n}\r\nconst useStyles = makeStyles({\r\n    root: {\r\n      \r\n      textAlign: 'center',\r\n      alignItems: 'center',\r\n      alignContent: 'center',\r\n      color: '#ffd5ff'\r\n      \r\n    },\r\n    bullet: {\r\n      display: 'inline-block',\r\n      margin: '0 2px',\r\n      transform: 'scale(0.8)',\r\n    },\r\n    title: {\r\n      fontSize: 18,\r\n      color: 'black',\r\n      textAlign: 'center'\r\n    },\r\n    pos: {\r\n      marginBottom: 12,\r\n    },\r\n  });\r\n\r\nconst QuestionCard: React.FC<propsType> = ({\r\n    question, options, callback\r\n}) => {\r\n    const classes = useStyles();\r\n    const bull = <span className={classes.bullet}>•</span>;\r\n  \r\n    let [ans, setAns] = useState('');\r\n\r\n    const storeAns = (event: any) => {\r\n        setAns(event.target.value)\r\n    }\r\n    return (\r\n        <div className=\"cent\">\r\n            <Card className=\"hello\">\r\n      <CardContent>\r\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n        {question}\r\n        </Typography> \r\n        </CardContent>\r\n        </Card>\r\n            \r\n            <form onSubmit={(e: React.FormEvent<EventTarget>) => callback(e, ans)}>\r\n                {\r\n                    \r\n                    options.map((opt: string, index: number) => {\r\n                        return (\r\n                            <div key={index}>\r\n                                <Card className=\"hello\">\r\n                                    <CardContent>\r\n                                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                                    <label>\r\n                                    <input type=\"radio\" value={opt} name=\"opt\" required checked= {ans === opt} onChange= {storeAns}/>\r\n                                    {opt}\r\n                                </label>\r\n                                        </Typography> \r\n                                    </CardContent>\r\n                                </Card>\r\n                                \r\n                            </div>\r\n\r\n                        )\r\n                    })\r\n                }\r\n                <input type=\"submit\" className=\"btn\"></input>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuestionCard\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n{/*  \r\nreturn (\r\n    <Card className={classes.root}>\r\n      <CardContent>\r\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n          Word of the Day\r\n        </Typography>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          be{bull}nev{bull}o{bull}lent\r\n        </Typography>\r\n        <Typography className={classes.pos} color=\"textSecondary\">\r\n          adjective\r\n        </Typography>\r\n        <Typography variant=\"body2\" component=\"p\">\r\n          well meaning and kindly.\r\n          <br />\r\n          {'\"a benevolent smile\"'}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <Button size=\"small\">Learn More</Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n\r\n*/}",{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":3,"column":9,"nodeType":"46","messageId":"47","endLine":3,"endColumn":13},{"ruleId":"44","severity":1,"message":"48","line":7,"column":8,"nodeType":"46","messageId":"47","endLine":7,"endColumn":12},{"ruleId":"44","severity":1,"message":"49","line":8,"column":8,"nodeType":"46","messageId":"47","endLine":8,"endColumn":19},{"ruleId":"44","severity":1,"message":"50","line":9,"column":8,"nodeType":"46","messageId":"47","endLine":9,"endColumn":18},{"ruleId":"44","severity":1,"message":"51","line":38,"column":11,"nodeType":"46","messageId":"47","endLine":38,"endColumn":15},{"ruleId":"44","severity":1,"message":"52","line":40,"column":10,"nodeType":"46","messageId":"47","endLine":40,"endColumn":13},{"ruleId":"44","severity":1,"message":"53","line":42,"column":11,"nodeType":"46","messageId":"47","endLine":42,"endColumn":19},{"ruleId":"54","severity":1,"message":"55","line":25,"column":1,"nodeType":"56","messageId":"57","endLine":27,"endColumn":4},{"ruleId":"44","severity":1,"message":"58","line":4,"column":8,"nodeType":"46","messageId":"47","endLine":4,"endColumn":19},{"ruleId":"44","severity":1,"message":"59","line":6,"column":8,"nodeType":"46","messageId":"47","endLine":6,"endColumn":14},{"ruleId":"44","severity":1,"message":"51","line":44,"column":11,"nodeType":"46","messageId":"47","endLine":44,"endColumn":15},{"ruleId":"54","severity":1,"message":"55","line":100,"column":1,"nodeType":"56","messageId":"57","endLine":126,"endColumn":4},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"@typescript-eslint/no-unused-vars","'Quiz' is defined but never used.","Identifier","unusedVar","'Card' is defined but never used.","'CardContent' is defined but never used.","'Typography' is defined but never used.","'bull' is assigned a value but never used.","'ans' is assigned a value but never used.","'storeAns' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'CardActions' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation"]